/*
 * CheckListBox.java
 *
 * Created on 18 iunie 2007, 18:03
 */
package az.util.components;

import az.store.product.Product;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author Creator
 */
public class CheckBoxList extends javax.swing.JPanel {

    /**
     * Creates new form BeanForm
     */
    public CheckBoxList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        internalItems = new Vector<InstallData>();
        jList1 = new javax.swing.JList();
        this.jList1.setListData(internalItems);
        CheckListCellRenderer renderer = new CheckListCellRenderer();
        jList1.setCellRenderer(renderer);
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        CheckListener lst = new CheckListener(this);
        jList1.addMouseListener(lst);
        jList1.addKeyListener(lst);

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * Holds value of property items.
     */
    private Vector<InstallData> internalItems;

    public void add(Product name, Boolean value) {

        internalItems.add(new InstallData(name, value));
        this.jList1.setListData(internalItems);
        this.jList1.updateUI();
    }

    /**
     * Setter for property items.
     *
     * @param items New value of property items.
     */
//    public void setItems(Vector<String> items) {
//        this.items = items;
//        internalItems.clear();
//        for (String s : items) {
//            internalItems.add(new InstallData(s));
//
//        }
//        this.jList1.setListData(internalItems);
//        this.jList1.updateUI();
//    }
//    public Vector<String> getItems() {
//
//        items.clear();
//        for (InstallData data : internalItems) {
//            items.add(data.m_name);
//        }
//        return items;
//    }
    public ArrayList<Product> getSelectedItems() {
        ArrayList<Product> v = new ArrayList<>();
        for (InstallData data : internalItems) {
            if (data.isSelected()) {
                v.add(data.getProduct());
            }
        }
        return v;
    }

    public void setCheckedAll(boolean checked) {
        for (InstallData data : internalItems) {
            data.setSelected(checked);
        }
        this.jList1.updateUI();
    }

    public void removeAll() {
        internalItems.clear();
    }
}
